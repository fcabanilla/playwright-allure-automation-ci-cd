# Azure Pipelines para Playwright + Allure + Docker
# Pipeline CI/CD completo para automatizaci贸n de pruebas

trigger:
  branches:
    include:
      - main
      - develop
      - feature/*
  paths:
    exclude:
      - README.md
      - docs/*

pr:
  branches:
    include:
      - main
      - develop

variables:
  # Variables de configuraci贸n
  - name: nodeVersion
    value: '18.x'
  - name: dockerImageName
    value: 'playwright-demoqa-tests'
  - name: allureVersion
    value: '2.29.0'
  
  # Variables de entorno para tests
  - name: ENVIRONMENT
    value: 'staging'
  - name: BASE_URL
    value: 'https://demoqa.com'
  - name: HEADLESS
    value: 'true'
  - name: CI
    value: 'true'

stages:
  # Etapa 1: Build y Validaci贸n
  - stage: Build
    displayName: 'Build and Validate'
    jobs:
      - job: BuildAndLint
        displayName: 'Build, Install Dependencies and Lint'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          - task: NodeTool@0
            displayName: 'Install Node.js'
            inputs:
              versionSpec: $(nodeVersion)
          
          - task: Cache@2
            displayName: 'Cache node modules'
            inputs:
              key: 'npm | "$(Agent.OS)" | package-lock.json'
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: ~/.npm
          
          - script: |
              npm ci
            displayName: 'Install dependencies'
          
          - script: |
              npm run lint
            displayName: 'Run ESLint'
            continueOnError: true
          
          - script: |
              npm run prettier
            displayName: 'Check code formatting'
            continueOnError: true
          
          - script: |
              npx playwright install --with-deps chromium
            displayName: 'Install Playwright browsers'
          
          - task: PublishPipelineArtifact@1
            displayName: 'Publish build artifacts'
            inputs:
              targetPath: '$(Build.SourcesDirectory)'
              artifact: 'build-artifacts'

  # Etapa 2: Tests con Docker
  - stage: TestWithDocker
    displayName: 'Run Tests with Docker'
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: DockerTests
        displayName: 'Run Tests in Docker Container'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifactName: 'build-artifacts'
              targetPath: '$(Build.SourcesDirectory)'
          
          - script: |
              docker build -t $(dockerImageName) .
            displayName: 'Build Docker image'
          
          - script: |
              docker run --rm \
                -e ENVIRONMENT=$(ENVIRONMENT) \
                -e BASE_URL=$(BASE_URL) \
                -e HEADLESS=$(HEADLESS) \
                -e CI=$(CI) \
                -v $(Build.SourcesDirectory)/allure-results:/app/allure-results \
                -v $(Build.SourcesDirectory)/test-results:/app/test-results \
                $(dockerImageName) npm test
            displayName: 'Run tests in Docker'
            continueOnError: true
          
          - task: PublishTestResults@2
            displayName: 'Publish test results'
            condition: always()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/results.xml'
              testRunTitle: 'Playwright Tests (Docker)'
          
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Allure results'
            condition: always()
            inputs:
              targetPath: '$(Build.SourcesDirectory)/allure-results'
              artifact: 'allure-results-docker'

  # Etapa 3: Tests Nativos (sin Docker)
  - stage: TestNative
    displayName: 'Run Tests Natively'
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: SmokeTests
        displayName: 'Smoke Tests'
        pool:
          vmImage: 'ubuntu-latest'
        strategy:
          matrix:
            Chrome:
              BROWSER: 'chromium'
            Firefox:
              BROWSER: 'firefox'
            Safari:
              BROWSER: 'webkit'
        
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifactName: 'build-artifacts'
              targetPath: '$(Build.SourcesDirectory)'
          
          - task: NodeTool@0
            displayName: 'Install Node.js'
            inputs:
              versionSpec: $(nodeVersion)
          
          - script: |
              npm ci
            displayName: 'Install dependencies'
          
          - script: |
              npx playwright install --with-deps $(BROWSER)
            displayName: 'Install Playwright browser'
          
          - script: |
              npm run test:smoke -- --project=$(BROWSER)
            displayName: 'Run smoke tests'
            env:
              ENVIRONMENT: $(ENVIRONMENT)
              BASE_URL: $(BASE_URL)
              HEADLESS: $(HEADLESS)
              CI: $(CI)
            continueOnError: true
          
          - task: PublishTestResults@2
            displayName: 'Publish test results'
            condition: always()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/results.xml'
              testRunTitle: 'Smoke Tests - $(BROWSER)'
          
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Allure results'
            condition: always()
            inputs:
              targetPath: '$(Build.SourcesDirectory)/allure-results'
              artifact: 'allure-results-$(BROWSER)'

      - job: RegressionTests
        displayName: 'Full Regression Tests'
        pool:
          vmImage: 'ubuntu-latest'
        dependsOn: SmokeTests
        condition: succeeded()
        
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifactName: 'build-artifacts'
              targetPath: '$(Build.SourcesDirectory)'
          
          - task: NodeTool@0
            displayName: 'Install Node.js'
            inputs:
              versionSpec: $(nodeVersion)
          
          - script: |
              npm ci
            displayName: 'Install dependencies'
          
          - script: |
              npx playwright install --with-deps
            displayName: 'Install all Playwright browsers'
          
          - script: |
              npm run test:regression
            displayName: 'Run regression tests'
            env:
              ENVIRONMENT: $(ENVIRONMENT)
              BASE_URL: $(BASE_URL)
              HEADLESS: $(HEADLESS)
              CI: $(CI)
              WORKERS: 3
            continueOnError: true
          
          - task: PublishTestResults@2
            displayName: 'Publish test results'
            condition: always()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/results.xml'
              testRunTitle: 'Regression Tests'
          
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Allure results'
            condition: always()
            inputs:
              targetPath: '$(Build.SourcesDirectory)/allure-results'
              artifact: 'allure-results-regression'

  # Etapa 4: Generaci贸n de Reportes
  - stage: Reports
    displayName: 'Generate and Publish Reports'
    dependsOn: 
      - TestWithDocker
      - TestNative
    condition: always()
    jobs:
      - job: AllureReports
        displayName: 'Generate Allure Reports'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Docker results'
            inputs:
              artifactName: 'allure-results-docker'
              targetPath: '$(Build.SourcesDirectory)/combined-results'
            continueOnError: true
          
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Chrome results'
            inputs:
              artifactName: 'allure-results-chromium'
              targetPath: '$(Build.SourcesDirectory)/combined-results'
            continueOnError: true
          
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Regression results'
            inputs:
              artifactName: 'allure-results-regression'
              targetPath: '$(Build.SourcesDirectory)/combined-results'
            continueOnError: true
          
          - script: |
              npm install -g allure-commandline@$(allureVersion)
            displayName: 'Install Allure CLI'
          
          - script: |
              allure generate combined-results --output allure-report --clean
            displayName: 'Generate Allure report'
          
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Allure HTML report'
            inputs:
              targetPath: '$(Build.SourcesDirectory)/allure-report'
              artifact: 'allure-html-report'
          
          # Opcional: Publicar en Azure Blob Storage o similar
          - script: |
              echo "Allure report generated successfully"
              echo "Download the artifact 'allure-html-report' to view the complete test report"
            displayName: 'Report generation summary'

  # Etapa 5: Notificaciones (opcional)
  - stage: Notifications
    displayName: 'Send Notifications'
    dependsOn: Reports
    condition: always()
    jobs:
      - job: SendNotifications
        displayName: 'Send Test Results Notifications'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          - script: |
              echo "Pipeline completed: $(Build.BuildNumber)"
              echo "Status: $(Agent.JobStatus)"
              echo "Branch: $(Build.SourceBranchName)"
              echo "Commit: $(Build.SourceVersion)"
            displayName: 'Pipeline summary'
          
          # Aqu铆 puedes agregar integraciones con Slack, Teams, email, etc.
          # Ejemplo para Teams:
          # - task: TeamsFx@1
          #   inputs:
          #     webhookUrl: $(TeamsWebhookUrl)
          #     message: 'Test execution completed for build $(Build.BuildNumber)'
